# Copyright 2013-2014 Antony Polukhin
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

# HOWTO: 
# * Put this file to boost_1_53_0/tools/build/v2 folder or to home folder
# * Redefine AndroidNDKRoot and AndroidBinariesPath in this file
# * Run bjam -j8 threadapi=pthread target-os=linux toolset=gcc-android stage
#       options --with-regex --with-test --with-system --with-log --with-serialization --with-graph --with-filesystem stage


#   This file is used to configure your Boost.Build installation. You can modify
# this file in place, or you can place it in a permanent location so that it
# does not get overwritten should you get a new version of Boost.Build. See:
#
#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
#
# for documentation about possible permanent locations.

#   This file specifies which toolsets (C++ compilers), libraries, and other
# tools are available. Often, you should be able to just uncomment existing
# example lines and adjust them to taste. The complete list of supported tools,
# and configuration instructions can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
#

#   This file uses Jam language syntax to describe available tools. Mostly,
# there are 'using' lines, that contain the name of the used tools, and
# parameters to pass to those tools -- where paremeters are separated by
# semicolons. Important syntax notes:
#
#   - Both ':' and ';' must be separated from other tokens by whitespace
#   - The '\' symbol is a quote character, so when specifying Windows paths you
#     should use '/' or '\\' instead.
#
# More details about the syntax can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language

using gcc : toolsets : g++-4.7 ;

# --------------------------------------------------------------------
# Android configurations.
# --------------------------------------------------------------------

AndroidNDKRoot = /home/antoshkka/boost_maintain/android/android-ndk-r8e ;

# Possible values: 3|4|5|8|9|14
AndroidNativeApiLevel = 9 ;

# Possible values: arm|mipsel(todo: sometimes mips)|x86
AndroidArch = arm ;     

AndroidGccVersion = 4.7 ;
AndroidHostName = linux-x86_64 ; # windows ;

AndroidBinariesPath = $(AndroidNDKRoot)/toolchains/$(AndroidArch)-linux-androideabi-$(AndroidGccVersion)/prebuilt/$(AndroidHostName)/bin ;
# --------------------------------------------------------------------
# --------------------------------------------------------------------

# Does not work
#JAMSHELL = d:/testing_boost_android/run_on_android.bat % ;


# Is same for 8b, 8c, 8d 8e ...
using gcc : androiddebug
:
$(AndroidBinariesPath)/$(AndroidArch)-linux-androideabi-g++
:
# 'Official' Android flags
<archiver>$(AndroidBinariesPath)/$(AndroidArch)-linux-androideabi-ar
<compileflags>-fpic
<compileflags>-ffunction-sections
<compileflags>-funwind-tables
<compileflags>-fstack-protector
<compileflags>-D__ARM_ARCH_5__
<compileflags>-D__ARM_ARCH_5T__
<compileflags>-D__ARM_ARCH_5E__
<compileflags>-D__ARM_ARCH_5TE__
<compileflags>-march=armv7-a
<compileflags>-mfloat-abi=softfp
<compileflags>-mfpu=vfp
<compileflags>-mthumb
<compileflags>-fomit-frame-pointer
<compileflags>-fno-strict-aliasing
<compileflags>-finline-limit=64
<compileflags>-Wa,--noexecstack
<compileflags>--sysroot=$(AndroidNDKRoot)/platforms/android-$(AndroidNativeApiLevel)/arch-$(AndroidArch)
<compileflags>-I$(AndroidNDKRoot)/platforms/android-9/arch-$(AndroidArch)/usr/include
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/$(AndroidGccVersion)/include
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/$(AndroidGccVersion)/libs/armeabi/include
<linkflags>--sysroot=$(AndroidNDKRoot)/platforms/android-$(AndroidNativeApiLevel)/arch-$(AndroidArch)
<linkflags>-L$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/$(AndroidGccVersion)/libs/armeabi/
<architecture>$(AndroidArch)
# User flags
<compileflags>-fexceptions
<compileflags>-frtti
<compileflags>-fvisibility=hidden
<compileflags>-fvisibility-inlines-hidden
<compileflags>-fdata-sections
#<cxxflags>-std=c++0x

# Boost workarounds
<compileflags>-DBOOST_ASIO_DISABLE_STD_ATOMIC # See https://code.google.com/p/android/issues/detail?id=42735#makechanges
<compileflags>-DBOOST_AC_USE_PTHREADS # See https://code.google.com/p/android/issues/detail?id=42735#makechanges
<cxxflags>-D_REENTRANT
<cxxflags>-D_GLIBCXX__PTHREADS
<cxxflags>-DBOOST_LOG_USE_CHAR 
<cxxflags>-DBOOST_LOG_DYN_LINK
<cxxflags>-DBOOST_SPIRIT_THREADSAFE
#<compileflags>-DBOOST_LOG_WITHOUT_SYSLOG #No Syslog
#<cxxflags>-D__arm__ #Defined by g++ 
<linkflags>-lgnustl_static
#<linkflags>-lgnustl_dynamic
#<threadapi>pthread # Does not work when put here, only from command line!
;

